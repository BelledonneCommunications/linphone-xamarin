/*
Copyright (C) 2017 Belledonne Communications SARL

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

using System;
using System.Runtime.InteropServices;

namespace Linphone
{
    public class LinphoneWrapper 
    {
        public const string LIB_NAME = "linphone-x86.so";
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern int belle_sip_object_data_set(IntPtr ptr, string name, IntPtr data, IntPtr cb);

        internal static void set(IntPtr ptr, IntPtr obj)
        {
            belle_sip_object_data_set(ptr, "cs_obj", obj, IntPtr.Zero);
        }

        [DllImport(LinphoneWrapper.LIB_NAME)]
		static extern IntPtr belle_sip_object_data_get(IntPtr ptr, string name);

        internal static IntPtr get(IntPtr ptr)
        {
            return belle_sip_object_data_get(ptr, "cs_obj");
        }
    }
	
	public class LinphoneAndroid
	{
		[DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void ms_set_jvm_from_env(IntPtr jnienv);
		
		public static void setJVM(IntPtr jnienv)
		{
			ms_set_jvm_from_env(jnienv);
		}

        [DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void setAndroidLogHandler();
		
		public static void setNativeLogHandler()
		{
			setAndroidLogHandler();
		}

        [DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void setMediastreamerAndroidContext(IntPtr jnienv, IntPtr context);
		
		public static void setAndroidContext(IntPtr jnienv, IntPtr context)
		{
			setMediastreamerAndroidContext(jnienv, context);
		}
	}
	
	{{#enums}}
	{{#enum}}
	public enum {{enumName}}
	{
		{{#values}}
		{{name}},
		{{/values}}
	}
	
	{{/enum}}
	{{/enums}}
	{{#interfaces}}
	{{#interface}}
	public class {{interfaceName}}
	{
	
	}
	
	{{/interface}}
	{{/interfaces}}
    {{#classes}}
    {{#_class}}
    [StructLayout(LayoutKind.Sequential)]
    public class {{className}}
    {
        internal IntPtr nativePtr;

		internal static {{className}} fromNativePtr(IntPtr ptr)
		{
			if (ptr == null) return null;
			IntPtr objPtr = LinphoneWrapper.get(ptr);
			if (objPtr == IntPtr.Zero)
			{
				{{className}} obj = new {{className}}();
				obj.nativePtr = ptr;
				objPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof({{className}})));
				Marshal.StructureToPtr(obj, objPtr, false);
				LinphoneWrapper.set(ptr, objPtr);
				return obj;
			} 
			else
			{
				return Marshal.PtrToStructure<{{className}}>(objPtr);
			}
		}
		
        {{#dllImports}}
		
        {{{prototype}}}
		
		{{#has_property}}
		{{property}}
		{
		{{#has_getter}}
			get
			{
				{{#is_string}}
				IntPtr stringPtr = {{getter_c_name}}({{getter_nativePtr}});
				return Marshal.PtrToStringAnsi(stringPtr);
				{{/is_string}}
				{{#is_bool}}
				return {{getter_c_name}}({{getter_nativePtr}}) == 0;
				{{/is_bool}}
				{{#is_class}}
				IntPtr ptr = {{getter_c_name}}({{getter_nativePtr}});
				return {{return}}.fromNativePtr(ptr);
				{{/is_class}}
				{{#is_enum}}
				return {{getter_c_name}}({{getter_nativePtr}});
				{{/is_enum}}
				{{#is_generic}}
				return {{getter_c_name}}({{getter_nativePtr}});
				{{/is_generic}}
			}
		{{/has_getter}}
		{{#has_setter}}
			set
			{
				{{#is_string}}
				{{setter_c_name}}({{setter_nativePtr}}value);
				{{/is_string}}
				{{#is_bool}}
				{{setter_c_name}}({{setter_nativePtr}}value ? 1 : 0);
				{{/is_bool}}
				{{#is_class}}
				{{setter_c_name}}({{setter_nativePtr}}value.nativePtr);
				{{/is_class}}
				{{#is_enum}}
				{{setter_c_name}}({{setter_nativePtr}}(int)value);
				{{/is_enum}}
				{{#is_generic}}
				{{setter_c_name}}({{setter_nativePtr}}value);
				{{/is_generic}}
			}
		{{/has_setter}}
		}
		{{/has_property}}
		{{#has_impl}}
		{{#impl}}
		public {{static}}{{type}} {{name}}({{args}})
		{
			{{#is_string}}
			IntPtr stringPtr = {{c_name}}({{nativePtr}}{{c_args}});
			return Marshal.PtrToStringAnsi(stringPtr);
			{{/is_string}}
			{{#is_bool}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}}) == 0 ? false : true;
			{{/is_bool}}
			{{#is_class}}
			IntPtr ptr = {{c_name}}({{nativePtr}}{{c_args}});
			return {{type}}.fromNativePtr(ptr);
			{{/is_class}}
			{{#is_enum}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}});
			{{/is_enum}}
			{{#is_generic}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}});
			{{/is_generic}}
		}
		{{/impl}}
		{{/has_impl}}
		
        {{/dllImports}}
    }
    {{/_class}}
	
    {{/classes}}
}