/*
LinphoneWrapper.cs
Copyright (C) 2017 Belledonne Communications SARL

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Linphone
{
	#region Wrapper specifics
    public class LinphoneWrapper 
    {
        public const string LIB_NAME = "linphone-x86.so";
    }
	
    [StructLayout(LayoutKind.Sequential)]
	public class LinphoneObject
	{
        internal IntPtr nativePtr;
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern int belle_sip_object_data_set(IntPtr ptr, string name, IntPtr data, IntPtr cb);

        [DllImport(LinphoneWrapper.LIB_NAME)]
		static extern IntPtr belle_sip_object_data_get(IntPtr ptr, string name);
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern void belle_sip_object_ref(IntPtr ptr);
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern void belle_sip_object_unref(IntPtr ptr);
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern IntPtr bctbx_list_next(IntPtr ptr);
		
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern IntPtr bctbx_list_get_data(IntPtr ptr);
		
		~LinphoneObject()
		{
			if (nativePtr != IntPtr.Zero) {
				belle_sip_object_data_set(nativePtr, "cs_obj", IntPtr.Zero, IntPtr.Zero);
				belle_sip_object_unref(nativePtr);
			}
		}
		
		internal static T fromNativePtr<T>(IntPtr ptr, bool takeRef=true) where T : LinphoneObject, new()
		{
			if (ptr == IntPtr.Zero) return null;
			IntPtr objPtr = belle_sip_object_data_get(ptr, "cs_obj");
			if (objPtr == IntPtr.Zero)
			{
                T obj = new T();
				if (takeRef)
                {
                    belle_sip_object_ref(ptr);
                }
				obj.nativePtr = ptr;
                objPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(T)));
				Marshal.StructureToPtr(obj, objPtr, false);
				belle_sip_object_data_set(ptr, "cs_obj", objPtr, IntPtr.Zero);
				return obj;
			} 
			else
			{
				return Marshal.PtrToStructure<T>(objPtr);
			}
		}
		
		internal static IEnumerable<string> MarshalStringArray(IntPtr arrayPtr)
		{
			if (arrayPtr != IntPtr.Zero)
			{
				IntPtr ptr = Marshal.ReadIntPtr(arrayPtr);
				while (ptr != IntPtr.Zero)
				{
					string key = Marshal.PtrToStringAnsi(ptr);
					yield return key;
					arrayPtr = new IntPtr(arrayPtr.ToInt64() + IntPtr.Size);
					ptr = Marshal.ReadIntPtr(arrayPtr);
				}
			}
		}
		
		internal static IEnumerable<T> MarshalBctbxList<T>(IntPtr listPtr) where T : LinphoneObject, new()
		{
			if (listPtr != IntPtr.Zero)
			{
				IntPtr ptr = listPtr;
				while (ptr != IntPtr.Zero)
				{
					IntPtr dataPtr = bctbx_list_get_data(ptr);
					if (dataPtr == IntPtr.Zero)
					{
						break;
					}
					T obj = fromNativePtr<T>(dataPtr);
					yield return obj;
					ptr = bctbx_list_next(ptr);
				}
			}
		}
	}
	
	public class LinphoneAndroid
	{
		[DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void ms_set_jvm_from_env(IntPtr jnienv);

        [DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void setAndroidLogHandler();

        [DllImport(LinphoneWrapper.LIB_NAME)]
        static extern void setMediastreamerAndroidContext(IntPtr jnienv, IntPtr context);
		
		public static void setNativeLogHandler()
		{
			setAndroidLogHandler();
		}
		
		public static void setAndroidContext(IntPtr jnienv, IntPtr context)
		{
			ms_set_jvm_from_env(jnienv);
			setMediastreamerAndroidContext(jnienv, context);
		}
	}
	#endregion
	
	#region Enums
	{{#enums}}
	{{#enum}}
	public enum {{enumName}}
	{
		{{#values}}
		{{name}},
		{{/values}}
	}
	
	{{/enum}}
	{{/enums}}
	#endregion
	
	#region Listeners
	{{#interfaces}}
	{{#interface}}
    [StructLayout(LayoutKind.Sequential)]
	public class {{interfaceName}} : LinphoneObject
	{
		{{#methods}}
		[DllImport(LinphoneWrapper.LIB_NAME)]
		{{#cb_setter}}
		static extern void {{name}}(IntPtr thiz, IntPtr cb);
		{{/cb_setter}}
		
		{{#delegate}}
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void {{name}}({{params}});
		{{/delegate}}
		
		{{#delegate_setter}}
		public {{delegate_name}} {{name}}
		{
			set
			{
				IntPtr cb = Marshal.GetFunctionPointerForDelegate(value);
				{{c_name}}(nativePtr, cb);
			}
		}
		{{/delegate_setter}}
		
		{{/methods}}
	}
	
	{{/interface}}
	{{/interfaces}}
	#endregion
	
	#region Classes
    {{#classes}}
    {{#_class}}
    [StructLayout(LayoutKind.Sequential)]
    public class {{className}} : LinphoneObject
    {
		{{#isLinphoneFactory}}
		[DllImport(LinphoneWrapper.LIB_NAME)]
		static extern IntPtr linphone_factory_create_core_cbs(IntPtr factory);
		
		public LinphoneCoreListener CreateCoreListener()
		{
			IntPtr coreCbsPtr = linphone_factory_create_core_cbs(nativePtr);
			return fromNativePtr<LinphoneCoreListener>(coreCbsPtr, false);
		}
		{{/isLinphoneFactory}}		
        {{#dllImports}}		
		[DllImport(LinphoneWrapper.LIB_NAME)]
        {{{prototype}}}
		{{#has_second_prototype}}
		[DllImport(LinphoneWrapper.LIB_NAME)]
		{{second_prototype}}
		{{/has_second_prototype}}
		
		{{#has_property}}
		{{{property}}}
		{
		{{#has_getter}}
			get
			{
				{{#is_string}}
				IntPtr stringPtr = {{getter_c_name}}({{getter_nativePtr}});
				return Marshal.PtrToStringAnsi(stringPtr);
				{{/is_string}}
				{{#is_bool}}
				return {{getter_c_name}}({{getter_nativePtr}}) == 0;
				{{/is_bool}}
				{{#is_class}}
				IntPtr ptr = {{getter_c_name}}({{getter_nativePtr}});
				return fromNativePtr<{{return}}>(ptr, {{takeRef}});
				{{/is_class}}
				{{#is_enum}}
				return {{getter_c_name}}({{getter_nativePtr}});
				{{/is_enum}}
				{{#is_generic}}
				return {{getter_c_name}}({{getter_nativePtr}});
				{{/is_generic}}
				{{#is_string_list}}
				return MarshalStringArray({{getter_c_name}}({{getter_nativePtr}}));
				{{/is_string_list}}
				{{#is_class_list}}
				return MarshalBctbxList<{{{list_type}}}>({{getter_c_name}}({{getter_nativePtr}}));
				{{/is_class_list}}
			}
		{{/has_getter}}
		{{#has_setter}}
			set
			{
				{{#is_string}}
				{{setter_c_name}}({{setter_nativePtr}}value);
				{{/is_string}}
				{{#is_bool}}
				{{setter_c_name}}({{setter_nativePtr}}value ? 1 : 0);
				{{/is_bool}}
				{{#is_class}}
				{{setter_c_name}}({{setter_nativePtr}}value.nativePtr);
				{{/is_class}}
				{{#is_enum}}
				{{setter_c_name}}({{setter_nativePtr}}(int)value);
				{{/is_enum}}
				{{#is_generic}}
				{{setter_c_name}}({{setter_nativePtr}}value);
				{{/is_generic}}
			}
		{{/has_setter}}
		}
		{{/has_property}}
		{{#has_impl}}
		{{#impl}}
		public {{static}}{{{type}}} {{name}}({{args}})
		{
			{{#is_string}}
			IntPtr stringPtr = {{c_name}}({{nativePtr}}{{c_args}});
			return Marshal.PtrToStringAnsi(stringPtr);
			{{/is_string}}
			{{#is_bool}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}}) == 0 ? false : true;
			{{/is_bool}}
			{{#is_class}}
			IntPtr ptr = {{c_name}}({{nativePtr}}{{c_args}});
			return fromNativePtr<{{type}}>(ptr, {{takeRef}});
			{{/is_class}}
			{{#is_enum}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}});
			{{/is_enum}}
			{{#is_generic}}
			{{return}}{{c_name}}({{nativePtr}}{{c_args}});
			{{/is_generic}}
			{{#is_string_list}}
			return MarshalStringArray({{c_name}}({{nativePtr}}{{c_args}}));
			{{/is_string_list}}
			{{#is_class_list}}
			return MarshalBctbxList<{{{list_type}}}>({{c_name}}({{nativePtr}}{{c_args}}));
			{{/is_class_list}}
		}
		{{/impl}}
		{{/has_impl}}
        {{/dllImports}}
    }
    {{/_class}}	
    {{/classes}}
	#endregion
}